// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oF7mM9CEBfWYWQRSFqDF3g
// Component: GimJRAhamXUT
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  initializePlasmicStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import PageLayout from "../../PageLayout"; // plasmic-import: EK7JQOoHjVmM/component
import DateTimeRangePicker from "../../DateTimeRangePicker"; // plasmic-import: IsjRuBP7nl7e/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import Statistic from "../../Statistic"; // plasmic-import: O2_wvXe6dbbS/component
import Chart from "../../Chart"; // plasmic-import: KzHd36x879xW/component
import Card from "../../Card"; // plasmic-import: v1F2R2_j1-Kr/component
import { useScreenVariants as useScreenVariants_1NoYld3PSaTf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 1NoYLD3PSaTf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oF7mM9CEBfWYWQRSFqDF3g/projectcss
import sty from "./PlasmicMonthOverview.module.css"; // plasmic-import: GimJRAhamXUT/css

createPlasmicElementProxy;

export const PlasmicMonthOverview__VariantProps = new Array();

export const PlasmicMonthOverview__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMonthOverview__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "start[].value",
        type: "private",
        variableType: "text",
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    totalUsersByMonthCustomRange: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "c6efcc92-d1e1-4c88-8897-509fbf008079",
        userArgs: {
          query: [$state.start.value]
        },
        cacheKey: `plasmic.$.c6efcc92-d1e1-4c88-8897-509fbf008079.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalOrdersByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "dccc7c69-6928-4597-842e-cdcb4073d1da",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.dccc7c69-6928-4597-842e-cdcb4073d1da.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "6d12df6d-fdad-4296-9db6-8b514d2e65f9",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.6d12df6d-fdad-4296-9db6-8b514d2e65f9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentTotalCustomers: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "4bf3221a-4c62-4816-9315-1546c9d114a4",
        userArgs: {},
        cacheKey: `plasmic.$.4bf3221a-4c62-4816-9315-1546c9d114a4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    _12MonthRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "52747520-857d-4c95-b240-1aeffd37d4c8",
        userArgs: {
          query: [$state.start.value]
        },
        cacheKey: `plasmic.$.52747520-857d-4c95-b240-1aeffd37d4c8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMUserGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "1534796a-0d07-455a-bdab-e2e2779d94df",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.1534796a-0d07-455a-bdab-e2e2779d94df.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMOrderGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "d3885711-ddaf-4bea-b4b1-dd47ecc03c8d",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.d3885711-ddaf-4bea-b4b1-dd47ecc03c8d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMAvgOrderGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "613ef3de-a774-4e61-8c72-ef32a2501903",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.613ef3de-a774-4e61-8c72-ef32a2501903.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMRevenueGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "1b6a613b-ef25-4d92-836d-ea269d09c4e1",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.1b6a613b-ef25-4d92-836d-ea269d09c4e1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentAvgOrder: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "09651491-d725-4cd9-8702-dfc80e55c1f7",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.09651491-d725-4cd9-8702-dfc80e55c1f7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topCountriesByRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "29128a4d-a554-4896-b83e-5b44b1324fbb",
        userArgs: {},
        cacheKey: `plasmic.$.29128a4d-a554-4896-b83e-5b44b1324fbb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topProductsByQuantitySold: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "03e446c4-33a4-427e-a64b-3611258d1ed8",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.03e446c4-33a4-427e-a64b-3611258d1ed8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalProductsSold: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "3446f1d8-81cd-4f2b-b56a-a8493a917664",
        userArgs: {},
        cacheKey: `plasmic.$.3446f1d8-81cd-4f2b-b56a-a8493a917664.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topCategoriesByOrders: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "d0ac28c7-123b-480a-9e2b-4887700de689",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.d0ac28c7-123b-480a-9e2b-4887700de689.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_1NoYld3PSaTf()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
            2, 3, 4
          ]).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <PageLayout
                data-plasmic-name={"pageLayout"}
                data-plasmic-override={overrides.pageLayout}
                className={classNames("__wab_instance", sty.pageLayout)}
                key={currentIndex}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <React.Fragment>
                      <section
                        className={classNames(
                          projectcss.all,
                          sty.section__riYHz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___45M6
                          )}
                        >
                          <h1
                            data-plasmic-name={"h1"}
                            data-plasmic-override={overrides.h1}
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1
                            )}
                          >
                            {"Welcome back! "}
                          </h1>
                        </div>
                      </section>
                      <section
                        className={classNames(
                          projectcss.all,
                          sty.section__sF8Fa
                        )}
                      >
                        <DateTimeRangePicker
                          data-plasmic-name={"dateTimeRangePicker"}
                          data-plasmic-override={overrides.dateTimeRangePicker}
                          className={classNames(
                            "__wab_instance",
                            sty.dateTimeRangePicker
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: true,
                              bordered: true,
                              className: classNames(
                                "__wab_instance",
                                sty.start
                              ),
                              onChange: async (...eventArgs) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["start", __plasmic_idx_0, "value"],
                                  AntdDatePicker_Helpers
                                ).apply(null, eventArgs);
                              },
                              picker: "date",
                              popupScopeClassName:
                                sty["start__datePickerPopup"],
                              showTime: false,
                              value: generateStateValueProp($state, [
                                "start",
                                __plasmic_idx_0,
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "start[].value"
                                }
                              ],

                              [__plasmic_idx_0],
                              AntdDatePicker_Helpers ?? {},
                              child$Props
                            );
                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "start[].value",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],

                              [__plasmic_idx_0]
                            );
                            return (
                              <AntdDatePicker
                                data-plasmic-name={"start"}
                                data-plasmic-override={overrides.start}
                                {...child$Props}
                              />
                            );
                          })()}
                        </DateTimeRangePicker>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eOltl
                          )}
                        >
                          <Statistic
                            className={classNames(
                              "__wab_instance",
                              sty.statistic__gg7DG
                            )}
                            number={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vHpqv
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{""}</React.Fragment>
                                  {
                                    <h2
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h2,
                                        projectcss.__wab_text,
                                        sty.h2___9D1Nx
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries
                                              .totalUsersByMonthCustomRange
                                              .data[0].cumulative_users;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "NULL";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </h2>
                                  }

                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </div>
                            }
                            numberTrend={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7Cl2I
                                )}
                                style={(() => {
                                  try {
                                    return (() => {
                                      function decimalToPercentage(
                                        decimalValue
                                      ) {
                                        const percentage = Math.floor(
                                          decimalValue * 1
                                        );
                                        return percentage;
                                      }
                                      const usersIncreasePercentage =
                                        $queries.moMUserGrowth.data[0]
                                          .user_increase_percentage;
                                      const displayText =
                                        decimalToPercentage(
                                          usersIncreasePercentage
                                        ) < 0
                                          ? {
                                              color:
                                                "var(--plasmic-token-danger-800)",
                                              backgroundColor:
                                                "var(--plasmic-token-danger-100)"
                                            }
                                          : {};
                                      return displayText;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        function decimalToPercentage(
                                          decimalValue
                                        ) {
                                          const percentage = Math.floor(
                                            decimalValue * 1
                                          );
                                          return percentage + "%";
                                        }
                                        const userIncreasePercentage =
                                          $queries.moMUserGrowth.data[0]
                                            .user_increase_percentage;
                                        const displayText = decimalToPercentage(
                                          userIncreasePercentage
                                        );
                                        return displayText;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "NULL";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            timeRange={"from last month"}
                            unit={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___1VNS
                                )}
                              >
                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p__vktCk
                                  )}
                                >
                                  {"Total users"}
                                </p>
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__iGh4N)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"28px"}
                                  displayMaxWidth={"28px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/dashboard/images/image7.svg",
                                    fullWidth: 150,
                                    fullHeight: 150,
                                    aspectRatio: 1
                                  }}
                                />
                              </div>
                            }
                          />

                          <Statistic
                            className={classNames(
                              "__wab_instance",
                              sty.statistic__sHhK6
                            )}
                            number={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mRxe9
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{""}</React.Fragment>
                                  {
                                    <h2
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h2,
                                        projectcss.__wab_text,
                                        sty.h2__gkfXw
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries
                                              .totalOrdersByDateRange.data[0]
                                              .order_count;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "NULL";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </h2>
                                  }

                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </div>
                            }
                            numberTrend={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rluve
                                )}
                                style={(() => {
                                  try {
                                    return (() => {
                                      function decimalToPercentage(
                                        decimalValue
                                      ) {
                                        const percentage = Math.floor(
                                          decimalValue * 1
                                        );
                                        return percentage;
                                      }
                                      const ordersIncreasePercentage =
                                        $queries.moMOrderGrowth.data[0]
                                          .order_increase_percentage;
                                      const displayText =
                                        decimalToPercentage(
                                          ordersIncreasePercentage
                                        ) < 0
                                          ? {
                                              color:
                                                "var(--plasmic-token-danger-800)",
                                              backgroundColor:
                                                "var(--plasmic-token-danger-100)"
                                            }
                                          : {};
                                      return displayText;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        function decimalToPercentage(
                                          decimalValue
                                        ) {
                                          const percentage = Math.floor(
                                            decimalValue * 1
                                          );
                                          return percentage + "%";
                                        }
                                        const ordersIncreasePercentage =
                                          $queries.moMOrderGrowth.data[0]
                                            .order_increase_percentage;
                                        const displayText = decimalToPercentage(
                                          ordersIncreasePercentage
                                        );
                                        return displayText;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "NULL";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            unit={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pZoot
                                )}
                              >
                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p__kowY1
                                  )}
                                >
                                  {"New orders"}
                                </p>
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__rCqC4)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"28px"}
                                  displayMaxWidth={"28px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/dashboard/images/orderIcon.svg",
                                    fullWidth: 150,
                                    fullHeight: 150,
                                    aspectRatio: 1
                                  }}
                                />
                              </div>
                            }
                          />

                          <Statistic
                            className={classNames(
                              "__wab_instance",
                              sty.statistic__mmzcc
                            )}
                            number={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mz05N
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{""}</React.Fragment>
                                  {
                                    <h2
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h2,
                                        projectcss.__wab_text,
                                        sty.h2__vSqVo
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              "$" +
                                              Intl.NumberFormat("en").format(
                                                $queries.currentAvgOrder.data[0]
                                                  .avg_order_total
                                              )
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "NULL";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </h2>
                                  }

                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </div>
                            }
                            numberTrend={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dZpi
                                )}
                                style={(() => {
                                  try {
                                    return (() => {
                                      function decimalToPercentage(
                                        decimalValue
                                      ) {
                                        const percentage = Math.floor(
                                          decimalValue * 1
                                        );
                                        return percentage;
                                      }
                                      const avg_order_value_increase_percentage =
                                        $queries.moMAvgOrderGrowth.data[0]
                                          .avg_order_value_increase_percentage;
                                      const displayText =
                                        decimalToPercentage(
                                          avg_order_value_increase_percentage
                                        ) < 0
                                          ? {
                                              color:
                                                "var(--plasmic-token-danger-800)",
                                              backgroundColor:
                                                "var(--plasmic-token-danger-100)"
                                            }
                                          : {};
                                      return displayText;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        function decimalToPercentage(
                                          decimalValue
                                        ) {
                                          const percentage = Math.floor(
                                            decimalValue * 1
                                          );
                                          return percentage + "%";
                                        }
                                        const avg_order_value_increase_percentage =
                                          $queries.moMAvgOrderGrowth.data[0]
                                            .avg_order_value_increase_percentage;
                                        const displayText = decimalToPercentage(
                                          avg_order_value_increase_percentage
                                        );
                                        return displayText;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "NULL";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            unit={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wMou7
                                )}
                              >
                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p___4Rkbr
                                  )}
                                >
                                  {"Avg. order value"}
                                </p>
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__uhCsN)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"28px"}
                                  displayMaxWidth={"28px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/dashboard/images/dollarIcon.svg",
                                    fullWidth: 150,
                                    fullHeight: 150,
                                    aspectRatio: 1
                                  }}
                                />
                              </div>
                            }
                          />

                          <Statistic
                            className={classNames(
                              "__wab_instance",
                              sty.statistic__m4Xpj
                            )}
                            number={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wx1Zp
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{""}</React.Fragment>
                                  {
                                    <h2
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h2,
                                        projectcss.__wab_text,
                                        sty.h2__tX5G1
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              "$" +
                                              Intl.NumberFormat("en").format(
                                                $queries.currentRevenue.data[0]
                                                  .total_revenue_this_month
                                              )
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "NULL";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </h2>
                                  }

                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </div>
                            }
                            numberTrend={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ubHu
                                )}
                                style={(() => {
                                  try {
                                    return (() => {
                                      function decimalToPercentage(
                                        decimalValue
                                      ) {
                                        const percentage = Math.floor(
                                          decimalValue * 1
                                        );
                                        return percentage;
                                      }
                                      const revenueIncreasePercentage =
                                        $queries.moMRevenueGrowth.data[0]
                                          .revenue_increase_percentage;
                                      const displayText =
                                        decimalToPercentage(
                                          revenueIncreasePercentage
                                        ) < 0
                                          ? {
                                              color:
                                                "var(--plasmic-token-danger-800)",
                                              backgroundColor:
                                                "var(--plasmic-token-danger-100)"
                                            }
                                          : {};
                                      return displayText;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        function decimalToPercentage(
                                          decimalValue
                                        ) {
                                          const percentage = Math.floor(
                                            decimalValue * 1
                                          );
                                          return percentage + "%";
                                        }
                                        const revenueIncreasePercentage =
                                          $queries.moMRevenueGrowth.data[0]
                                            .revenue_increase_percentage;
                                        const displayText = decimalToPercentage(
                                          revenueIncreasePercentage
                                        );
                                        return displayText;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "NULL";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            unit={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kinlH
                                )}
                              >
                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p__nJ5Yi
                                  )}
                                >
                                  {"Total revenue"}
                                </p>
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img___6Zany)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"28px"}
                                  displayMaxWidth={"28px"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/dashboard/images/cartIcon.svg",
                                    fullWidth: 150,
                                    fullHeight: 150,
                                    aspectRatio: 1
                                  }}
                                />
                              </div>
                            }
                          />
                        </Stack__>
                      </section>
                      <section
                        className={classNames(
                          projectcss.all,
                          sty.section__g1C0X
                        )}
                      >
                        <Chart
                          data-plasmic-name={"chart"}
                          data-plasmic-override={overrides.chart}
                          className={classNames("__wab_instance", sty.chart)}
                          get12MoRevenue={$queries._12MonthRevenue}
                        />
                      </section>
                      <section
                        className={classNames(
                          projectcss.all,
                          sty.section__oaS8V
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0UeAa
                          )}
                        >
                          <Card
                            className={classNames(
                              "__wab_instance",
                              sty.card__bVjwh
                            )}
                            title={
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2___9NZ08
                                )}
                              >
                                {"Top products sold"}
                              </h2>
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__uqEil
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__bRs0H
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__e03T5
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return undefined;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Total users";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.topProductsByQuantitySold
                                      .data;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__x5TUe
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__moJar
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.product_name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Product ";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__wGsoC
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.total_quantity_sold;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Revenue";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          </Card>
                          <Card
                            className={classNames(
                              "__wab_instance",
                              sty.card__gsNyU
                            )}
                            title={
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2___84Dc2
                                )}
                              >
                                {"Top product categories"}
                              </h2>
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__x2AOd
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pw3Hf
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__sSaks
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return undefined;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Total users";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.topCategoriesByOrders.data;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__uldJi
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__t5Cqm
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.category_name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Product ";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__bnaCm
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.num_orders_in_category;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Revenue";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          </Card>
                        </Stack__>
                      </section>
                    </React.Fragment>
                  )}
                </DataCtxReader__>
              </PageLayout>
            );
          })}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "h1", "dateTimeRangePicker", "start", "chart"],
  pageLayout: ["pageLayout", "h1", "dateTimeRangePicker", "start", "chart"],
  h1: ["h1"],
  dateTimeRangePicker: ["dateTimeRangePicker", "start"],
  start: ["start"],
  chart: ["chart"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMonthOverview__ArgProps,
          internalVariantPropNames: PlasmicMonthOverview__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMonthOverview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMonthOverview";
  } else {
    func.displayName = `PlasmicMonthOverview.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "oF7mM9CEBfWYWQRSFqDF3g"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMonthOverview = Object.assign(
  // Top-level PlasmicMonthOverview renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    h1: makeNodeComponent("h1"),
    dateTimeRangePicker: makeNodeComponent("dateTimeRangePicker"),
    start: makeNodeComponent("start"),
    chart: makeNodeComponent("chart"),
    // Metadata about props expected for PlasmicMonthOverview
    internalVariantProps: PlasmicMonthOverview__VariantProps,
    internalArgProps: PlasmicMonthOverview__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMonthOverview;
/* prettier-ignore-end */
