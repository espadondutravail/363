// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oF7mM9CEBfWYWQRSFqDF3g
// Component: IEPFHsdHgTtF
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import PageLayout from "../../PageLayout"; // plasmic-import: EK7JQOoHjVmM/component
import Slider from "../../Slider"; // plasmic-import: dRNK6tgqCleK/component
import SliderThumb from "../../SliderThumb"; // plasmic-import: -QA8ZRVjk7lF/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oF7mM9CEBfWYWQRSFqDF3g/projectcss
import sty from "./PlasmicBusinessMetrics.module.css"; // plasmic-import: IEPFHsdHgTtF/css

createPlasmicElementProxy;

export const PlasmicBusinessMetrics__VariantProps = new Array();

export const PlasmicBusinessMetrics__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBusinessMetrics__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "slider.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "slider2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "slider3.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "slider4.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    topRevByCountryInDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "1ba34f1e-f442-4831-9158-c39d150dd5d5",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.1ba34f1e-f442-4831-9158-c39d150dd5d5.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    ordersByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "cc7fd8c8-39a5-4ba0-af15-9b6eb16bf116",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.cc7fd8c8-39a5-4ba0-af15-9b6eb16bf116.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    signupsByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "61bc1143-073d-4cb7-96db-bc2b31a1fa33",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.61bc1143-073d-4cb7-96db-bc2b31a1fa33.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalRevByCustomDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "120fb89b-597a-47c4-94d9-e4162e6f95ab",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.120fb89b-597a-47c4-94d9-e4162e6f95ab.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    monthlyRevByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "ab77b169-b7a6-4fb7-a624-54bf5fe04034",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.ab77b169-b7a6-4fb7-a624-54bf5fe04034.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    quarterlyRevByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "iHeaU9vvLuiWrGsLcqZQF2",
        opId: "e6fac03e-daad-4e59-b91e-ee48b2d1e984",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.e6fac03e-daad-4e59-b91e-ee48b2d1e984.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <div
                      data-plasmic-name={"freeBox"}
                      data-plasmic-override={overrides.freeBox}
                      className={classNames(projectcss.all, sty.freeBox)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {""}
                      </h1>
                    </div>
                  </section>
                  <Slider
                    data-plasmic-name={"slider"}
                    data-plasmic-override={overrides.slider}
                    className={classNames("__wab_instance", sty.slider)}
                    initialValue={2}
                    maxValue={5}
                    minValue={0}
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "slider",
                        "value"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    thumbs={
                      <SliderThumb
                        data-plasmic-name={"sliderThumb"}
                        data-plasmic-override={overrides.sliderThumb}
                        className={classNames(
                          "__wab_instance",
                          sty.sliderThumb
                        )}
                        disabled={false}
                      />
                    }
                    unnamedProp={
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000" }}
                          >
                            {"Label"}
                          </span>
                        </React.Fragment>
                      </div>
                    }
                  />

                  <Slider
                    data-plasmic-name={"slider2"}
                    data-plasmic-override={overrides.slider2}
                    className={classNames("__wab_instance", sty.slider2)}
                    initialValue={2}
                    maxValue={5}
                    minValue={0}
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "slider2",
                        "value"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  />

                  <Slider
                    data-plasmic-name={"slider3"}
                    data-plasmic-override={overrides.slider3}
                    className={classNames("__wab_instance", sty.slider3)}
                    initialValue={2}
                    maxValue={5}
                    minValue={0}
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "slider3",
                        "value"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  />

                  <Slider
                    data-plasmic-name={"slider4"}
                    data-plasmic-override={overrides.slider4}
                    className={classNames("__wab_instance", sty.slider4)}
                    initialValue={2}
                    maxValue={5}
                    minValue={0}
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "slider4",
                        "value"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "freeBox",
    "h1",
    "slider",
    "text",
    "sliderThumb",
    "slider2",
    "slider3",
    "slider4"
  ],

  pageLayout: [
    "pageLayout",
    "section",
    "freeBox",
    "h1",
    "slider",
    "text",
    "sliderThumb",
    "slider2",
    "slider3",
    "slider4"
  ],

  section: ["section", "freeBox", "h1"],
  freeBox: ["freeBox", "h1"],
  h1: ["h1"],
  slider: ["slider", "text", "sliderThumb"],
  text: ["text"],
  sliderThumb: ["sliderThumb"],
  slider2: ["slider2"],
  slider3: ["slider3"],
  slider4: ["slider4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBusinessMetrics__ArgProps,
          internalVariantPropNames: PlasmicBusinessMetrics__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBusinessMetrics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBusinessMetrics";
  } else {
    func.displayName = `PlasmicBusinessMetrics.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "oF7mM9CEBfWYWQRSFqDF3g"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicBusinessMetrics = Object.assign(
  // Top-level PlasmicBusinessMetrics renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    slider: makeNodeComponent("slider"),
    text: makeNodeComponent("text"),
    sliderThumb: makeNodeComponent("sliderThumb"),
    slider2: makeNodeComponent("slider2"),
    slider3: makeNodeComponent("slider3"),
    slider4: makeNodeComponent("slider4"),
    // Metadata about props expected for PlasmicBusinessMetrics
    internalVariantProps: PlasmicBusinessMetrics__VariantProps,
    internalArgProps: PlasmicBusinessMetrics__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBusinessMetrics;
/* prettier-ignore-end */
